package com.example.todo.controller;

import com.example.todo.Entity.Todo;
import com.example.todo.service.TodoService;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/todoapi")
@CrossOrigin(origins = "*") // for development; restrict in production
public class TodoController {

    private final TodoService service;

    public TodoController(TodoService service) {
        this.service = service;
    }

    @GetMapping("/")
    public void sample() {
    	System.out.println("Welcome to To-do List");
    	
        
    }
    // GET /todoapi/all
    @GetMapping("/all")
    public List<Todo> all() {
        return service.findAll();
    }

    // GET /todoapi/get/{id}
    @GetMapping("/get/{id}")
    public ResponseEntity<Todo> getById(@PathVariable Long id) {
        return service.findById(id)
                .map(ResponseEntity::ok)
                .orElse(ResponseEntity.notFound().build());
    }

    // POST /todoapi/add
    @PostMapping("/add")
    public ResponseEntity<Todo> add(@RequestBody Todo todo) {
        // if client provided id and it already exists, return conflict
        if (todo.getId() != null && service.existsById(todo.getId())) {
            return ResponseEntity.status(409).build();
        }
        Todo saved = service.save(todo);
        return ResponseEntity.status(201).body(saved);
    }

    // PUT /todoapi/update
    @PutMapping("/update")
    public ResponseEntity<Todo> update(@RequestBody Todo todo) {
        if (todo.getId() == null) {
            return ResponseEntity.badRequest().build();
        }
        return service.findById(todo.getId())
                .map(existing -> {
                    existing.setTitle(todo.getTitle());
                    existing.setDescription(todo.getDescription());
                    existing.setCompleted(todo.getCompleted());
                    Todo updated = service.save(existing);
                    return ResponseEntity.ok(updated);
                })
                .orElse(ResponseEntity.notFound().build());
    }

    // DELETE /todoapi/delete/{id}
    @DeleteMapping("/delete/{id}")
    public ResponseEntity<String> delete(@PathVariable Long id) {
        if (!service.existsById(id)) {
            return ResponseEntity.notFound().build();
        }
        service.deleteById(id);
        return ResponseEntity.ok("Deleted");
    }
}
